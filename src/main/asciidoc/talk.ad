= Web Services con Android
:icons: font
:twitter-tag: UDE
:conference-tag:
:talk-tag: Intro WS&Android
:linkattrs:
ifndef::partials[:partials: partials]

include::{partials}/footer.ad[]

== Conceptos de Web Services icon:lightbulb[]

* Un Web Service es una tecnología o conjunto de estándares y protocolos que sirve para intercambiar datos entres aplicaciones que operan sobre una red

* Los Web Services se caracterizan por ser independientes de cualquier plataforma o lenguaje de programación

* Existen principalmente dos tipos de Web Services:
SOAP  (Simple Object Access Protocol) y REST (Representational State Transfer)

== SOAP

* Es una especificación definida por la W3C
* Es un conjunto de protocolos y estándares
* Utiliza XML como formato de intercambio de datos

== REST

* Es más un conjunto de convenciones aceptadas por la industria, que una especificación formal construida por un consorcio
* Es un estilo de arquitectura de software basado en intercambio de datos en diferentes formatos, usualmente JSON, utilizando HTTP como medio de transporte
* Son llamadas HTTP tal como las hace un navegador web cuando escribimos en la barra de direcciones

== Web Services en Android icon:lightbulb[]

* En aplicaciones Mobile o web de tipo client-side (tal como Angular) hay una tendencia a utilizar mayormente web services de tipo REST, sobre SOAP

[NOTE.speaker]
====
Si bien SOAP se puede ver como una tecnología más potente y estructurada que REST, este último tiene la ventaja de ser más liviano, sencillo y fácil de escribir, ya que una aplicación solo necesita poder hacer llamadas HTTP para consumir este tipo de servicios, en cambio para hacer un cliente SOAP es necesario contar con librerías especiales que permitan manejar la pila de protocolos que requiere SOAP.
====

== Web Services en Android icon:lightbulb[]

* En el mundo Android existe la librería para Web Services SOAP llamada KSOAP. Esta librería es la más utilizada para escribir clientes SOAP en Android, además de ser una de las únicas
* Como mencionamos anteriormente, en Mobile y por consecuencia Android, el estilo REST esta más extendido y adoptado que SOAP, sobrepasando por mucho su utilización en comparación a este último.

== REST y Android

* En Android para hacer llamadas a servicios REST se utilizaba la clase HttpClient, la cual estaba incluida en el SDK hasta el API 22. A partir del API 23 se recomienda usar la clase HttpURLConnection.
* El intercambio de datos en REST es a través de notación JSON o cadenas de texto definidas por el usuario

[NOTE.speaker]
====
En resumen, se hacen llamadas HTTP la cuales toman parámetros u objetos JSON y devuelven texto u objetos JSON
====

== REST en Android

* En HTTP se utilizan cuatro métodos cuando se accede a una URL:
GET, POST, PUT y DELETE
* Se puede utiliza una combinación de URLs y métodos para hacer una API o interfaz REST. Por cada URL, podemos disponer de 4 métodos
* A veces se hace una analogía entre los 4 métodos de Http y el significado de CRUD (Create, Read, Update, Delete)

== REST en Android

* Ejemplos de URLs de servicios Rest

** http://127.0.0.1:8080/rs/Clientes/Cliente
** http://192.168.10.1/rs/Clientes/Cliente

== JSON

* JSON es una notación de objetos originada en el lenguaje JavaScript
* Sitio Web Oficial de JSON: http://www.json.org/

== Ejemplos de JSON

[source,json]
----
{
  "Nombre": "juan",
  "cel": "099123456",
  "documento": 41112223
}
----

== Ejemplos de JSON

[source,json]
----
{
  "id": 5,
  "nombreCompleto": {
    "nombre": "Juan",
    "apellido": "Mora"
  },
  "tipoDocumento": "Pasaporte",
  "documento": 98888887
}
----

== Permisos para invocación de servicios

**Importante:** Para poder acceder a Internet la aplicación debe solicitar dicho permiso, declarándolo en el archivo AndroidManifest.xml

[source,xml]
----
<uses-permission android:name="android.permission.INTERNET"/>
----

== ¿Cómo hacer una consulta HTTP?

1. Se crea el objeto URL
2. Debemos crear una petición POST o GET con la URL del servicio
3. Configuramos el content-type para indicar el formato de intercambio de datos, en el próximo ejemplo utilizaremos JSON

== ¿Cómo hacer una consulta HTTP?

[source,kotlin]
----
val url = URL(urlServer)
val httpURLConnection = url.openConnection() as HttpURLConnection
httpURLConnection.setRequestProperty("Content-Type",
    "application/json; charset=UTF-8")
httpURLConnection.requestMethod = "POST"
----

== ¿Cómo hacer una consulta HTTP?

Luego debemos crear un objeto JSON con los datos a enviar en la petición, para eso utilizaremos la clase `JSONObject`, incluida en el SDK.

Una vez creado el objeto JSON debemos asignarlo en la petición POST.

== ¿Cómo hacer una consulta HTTP?

[source,kotlin]
----
val jsonObject = JSONObject()
jsonObject.put("id", "15")
jsonObject.put("nombre", "Marc")
jsonObject.put("email", "marc@test.com")
jsonObject.put("edad", "47")
----

== ¿Cómo hacer una consulta por HTTP?

Con el objeto httpURLConnection creado y configurado, debemos solicitar el flujo de datos de escritura o lectura de la petición.
A través del flujo de datos se escribe o se lee a la dirección de destino.
La respuesta es un String que según los datos del origen pueden ser convertidas a un objeto JSON.

== ¿Cómo hacer una consulta por HTTP?

[source,kotlin]
----
val out = OutputStreamWriter(httpURLConnection.outputStream)
out.write("persona=${clienteJson.toString()}")
out.close()
val `in` = BufferedReader(
        InputStreamReader(httpURLConnection.inputStream))
inputLine = `in`.readLine()
while (null != (inputLine)) {
    result.append(inputLine)
    inputLine = `in`.readLine()
}
`in`.close()
//Procesar resultado
----

== ¿Cómo hacer una consulta HTTP?

Según se vio anteriormente, Android no permite hacer tareas de larga duración que bloqueen la interfaz, en el hilo principal de la aplicación.
Las conexiones a internet esta prohibidas por la plataforma en el hilo principal, directamente el SDK no nos permite ejecutar una conexión a internet en ese hilo.
Para lograr hacer una conexión a internet debemos ejecutar una tarea en segundo plano (Threads o Corrutinas).

== Invocación HTTP usando Threads

Como se demostró en el teórico de tareas en segundo plano, se puede usar un executor para ejecutar la petición:

[source,kotlin]
----
fun sendRequest() {
    executor.execute {
        //Envío de petición
    }
}
----

== Invocación HTTP usando Corrutinas

Para hacer la petición con corrutinas se recomienda usar el `Dispatchers.IO`:

[source,kotlin]
----
suspend fun sendRequest() {
    withContext(Dispatchers.IO) {
        //Envío de petición
    }
}
----

== Librerías para manejar Networking en Android

* OkHttp (Propósito general y funcionalidades avanzadas)
* Volley (Propósito general)
* Retrofit (Servicios Rest)
* Moshi (JSON)
* Picasso (Imágenes)

[NOTE.speaker]
====
OkHttp: Librería de propósito general, soporta HTTP/2, GZIP, invocaciones sincrónicas y asincrónicas.
Volley: Librería de propósito general, soportada por Google.
Retrofit: Es un cliente REST que usa OkHttp, adaptada para varios casos de uso, por ejemplo descarga de contenido, consumo de una API HTTP.
Moshi: Librería para manejo de objetos JSON.
Picasso: Librería para descarga de imágenes.
====

include::{partials}/self.ad[]